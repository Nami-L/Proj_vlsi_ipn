#ifndef __DO_RMAHDR_
#define __DO_RMAHDR_

#ifdef __cplusplus
  extern "C" {
#endif

#define VCS_RTLIB_TLS_MODEL  __attribute__((tls_model("initial-exec")))

typedef unsigned long UP;
typedef unsigned U;
typedef unsigned char UB;
typedef unsigned short US;
typedef unsigned long long ULL;
typedef unsigned char scalar;
typedef struct vec32 vec32;
typedef unsigned char SVAL;
typedef unsigned char TYPEB;
typedef struct etype ETYPE;
typedef struct qird QIRD;
typedef unsigned char UST_e;
typedef unsigned uscope_t;
typedef U  NumLibs_t;
struct vec32 {
    U  I1;
    U  I2;
};
typedef unsigned long long InstNumType;
typedef long long InstNumSigned;
typedef InstNumType  InstNum;
typedef U  InstNum32;
typedef unsigned long RP;
typedef unsigned long RO;
typedef U  GateCount;
typedef U  NodeCount;
typedef unsigned short HsimEdge;
typedef unsigned char HsimExprChar;
typedef struct {
    U  I645;
    RP  I646;
} RmaReceiveClock1;
typedef NodeCount  FlatNodeNum;
typedef unsigned ProcessNum;
typedef unsigned long long TimeStamp64;
typedef unsigned long long TimeStamp;
typedef enum {
    PD_SING = 0,
    PD_RF = 1,
    PD_PLSE = 2,
    PD_PLSE_RF = 3,
    PD_NULL = 4
} PD_e;
typedef TimeStamp64  RmaTimeStamp64;
typedef TimeStamp  RmaTimeStamp;
typedef struct {
    scalar  I647;
    U  I648;
    RmaTimeStamp64  I649;
} MsidInfo;
typedef union {
    double I656;
    unsigned long long I657;
    unsigned  I658[2];
} rma_clock_struct;
typedef struct eblk EBLK;
typedef int (* E_fn)(void);
typedef struct eblk {
    E_fn  I665;
    struct iptmpl * I666;
    struct eblk * I668;
    unsigned I669;
    unsigned I670;
    struct eblk * I671;
    unsigned I256;
} eblk_struct;
typedef struct {
    RP  I665;
    RP  I666;
    RP  I668;
    unsigned I669;
    unsigned I670;
    RP  I671;
    unsigned I256;
} RmaEblk;
typedef struct {
    RP  I665;
    RP  I666;
    RP  I668;
    unsigned I669;
    unsigned I670;
    RP  I671;
    unsigned I256;
    unsigned val;
} RmaEblklq;
typedef struct _DEblkLaneT {
    struct _DEblkLaneT * I678;
    struct eblk * I680;
} DEblkLaneT;
typedef struct _DEblkPoolT {
    struct _DEblkLaneT * I681;
    struct _DEblkLaneT * I682;
    unsigned I683;
    unsigned I684;
} DEblkPoolT;
typedef union {
    double I656;
    unsigned long long I657;
    unsigned  I658[2];
} clock_struct;
typedef struct RmaRetain_t RmaRetain;
struct RmaRetain_t {
    RP  I715;
    RmaEblk  I664;
    ULL  I717;
    US  I718 :1;
    US  I719 :4;
    US  I234 :2;
    US  state :2;
    US  I721 :1;
    US  I722 :2;
    US  I723 :2;
    US  fHsim :1;
    US  I561 :1;
    scalar  newval;
    scalar  I726;
    RP  I727;
};
struct retain_t {
    struct retain_t * I715;
    EBLK  I664;
    ULL  I717;
    US  I718 :1;
    US  I719 :4;
    US  I234 :2;
    US  state :2;
    US  I721 :1;
    US  I722 :2;
    US  I723 :2;
    US  fHsim :1;
    US  I724 :1;
    scalar  newval;
    scalar  I726;
    void * I727;
};
typedef struct MPSched MPS;
typedef struct RmaMPSched RmaMps;
struct MPSched {
    MPS  * I706;
    scalar  I707;
    scalar  I708;
    scalar  I709;
    scalar  fHsim :1;
    scalar  I234 :6;
    U  I711;
    EBLK  I712;
    void * I713;
    UP   I714[1];
};
struct RmaMPSched {
    RP  I706;
    scalar  I707;
    scalar  I708;
    scalar  I709;
    scalar  fHsim :1;
    scalar  I234 :6;
    U  I711;
    RmaEblk  I712;
    RP  I713;
    RP   I714[1];
};
typedef struct RmaMPSchedPulse RmaMpsp;
struct RmaMPSchedPulse {
    RP  I706;
    scalar  I707;
    scalar  I708;
    scalar  I709;
    scalar  I234;
    U  I711;
    RmaEblk  I712;
    scalar  I723;
    scalar  I732;
    scalar  I733;
    scalar  I734;
    U  I735;
    U  I736;
    U  I737;
    U  state;
    U  I738;
    RP  I666;
    RP  I739;
    RP  I740;
    RP   I714[1];
};
typedef struct MPItem MPI;
struct MPItem {
    U  * I742;
    void * I743;
};
typedef struct {
    RmaEblk  I664;
    RP  I744;
    scalar  I745;
    scalar  I723;
    scalar  I746;
} RmaTransEventHdr;
typedef struct RmaMPSchedPulseNewCsdf RmaMpspNewCsdf;
struct RmaMPSchedPulseNewCsdf {
    RP  I706;
    scalar  I707;
    scalar  I708;
    scalar  I709;
    scalar  fHsim :1;
    scalar  I234 :6;
    U  I711;
    RmaEblk  I712;
    scalar  I723;
    scalar  I732;
    scalar  I733;
    scalar  I734;
    U  state :4;
    U  I748 :28;
    U  I736;
    U  I737;
    RP  I749;
    RP  I666;
    RP  I750;
    RP   I714[1];
};
typedef struct red_t {
    U  I751;
    U  I752;
    U  I623;
} RED;
typedef struct predd {
    PD_e  I234;
    RED   I753[0];
} PREDD;
union rhs_value {
    vec32  I754;
    scalar  I745;
    vec32  * I723;
    double I755;
    U  I756;
};
typedef struct nbs_t {
    struct nbs_t * I757;
    struct nbs_t * I759;
    void (* I760)(struct nbs_t * I727);
    U  I761 :1;
    U  I762 :1;
    U  I763 :1;
    U  I764 :1;
    U  I765 :1;
    U  I766 :1;
    U  I767 :26;
    U  I768;
    void * I769;
    union rhs_value I770;
    vec32  I656;
    union {
        struct nbs_t * I1248;
        struct nbs_t * last;
    } I772;
} NBS;
typedef struct {
    RP  I773;
    RP  I739;
    RP  I666;
    RP  I740;
    RmaEblk  I664;
    RmaEblk  I774;
    RP  I775;
    scalar  I745;
    scalar  I723;
    char state;
    uscope_t  I776;
    U  I777;
    RP  I778;
    scalar  I732;
    scalar  I733;
    scalar  I734;
    U  I736;
    U  I737;
    RP  I713;
} RmaPulse;
typedef enum {
    QIRDModuleC = 1,
    QIRDSVPackageC = 2,
    QIRDSpiceModuleC = 3
} QIRDModuleType;
typedef struct {
    U  I782 :1;
    U  I783 :1;
    U  I784 :1;
    U  I785 :1;
    U  I786 :1;
    U  I787 :1;
    U  I788 :1;
    U  I789 :1;
    U  I790 :1;
    U  I791 :1;
    U  I792 :1;
    U  I793 :1;
    U  I794 :1;
    U  I795 :1;
    U  I796 :1;
    U  I797 :1;
    U  I798 :1;
    U  I799 :1;
    U  I800 :1;
    QIRDModuleType  I801 :2;
    U  I802 :1;
    U  I803 :1;
    U  I804 :1;
    U  I805 :1;
    U  I806 :1;
    U  I807 :1;
    U  I808 :1;
    U  I809 :1;
    U  I810 :1;
    U  I811 :1;
    U  I812 :1;
    U  I813 :1;
    U  I814 :1;
    U  I815 :1;
    U  I816 :1;
    U  I817 :1;
    U  I818 :1;
    U  I819 :1;
    U  I820 :1;
    U  I821 :1;
    U  I822 :1;
    U  I823 :1;
    U  I824 :1;
    U  I825 :1;
    U  I826 :1;
    U  I827 :1;
    U  I828 :1;
    U  I829 :1;
    U  I830 :1;
    U  I831 :1;
    U  I832 :1;
    U  I833 :1;
} BitFlags;
typedef struct qird_dbg_flags_s {
    U  I834 :29;
    U  I835 :1;
    U  I836 :1;
    U  I837 :1;
} qird_dbg_flags_t;
typedef struct nlpInfoT {
    U  * I838;
    U  * I839;
    U  * I840;
    UP  * I841;
    UP  * I842;
    UP  * I843;
    UP  * I844;
    char * I845;
    UP  * I846;
    UP  * I847;
    U  * I848;
    UP  * I849;
    UP  * I850;
    UP  * I851;
    UP  * I852;
    UP  * I853;
    UP  * I854;
    UP  * I855;
    UP  * I856;
    UP  * I857;
    UP  * I858;
    UP  * I859;
    UP  * I860;
    UP  * I861;
    UP  * I862;
    char * I863;
    char * I864;
    U  * I865;
    UP  * I866;
    UP  * I867;
    UP  * I868;
    UP  * I869;
    UP  * I870;
    UP  * I871;
    UP  * I872;
    UP  * I873;
    UP  * I874;
    UP  * I875;
    UP  * I876;
    UP  * I877;
    UP  * I878;
    UP  * I879;
    UP  * I880;
    UP  * I881;
    U  I882;
    U  I883;
    U  I884;
    U  I885;
    U  I886;
    U  I887;
    U  I888;
    U  I889;
    U  I890;
    U  I891;
    U  I892;
    U  I893;
    U  I894;
    U  I895;
    U  I896;
    U  I897;
    U  I898;
    U  I899;
    U  I900;
    U  I901;
    U  I902;
} nlpInfoT;
typedef struct txpInfoT {
    U  I903;
    U  I904;
    void * I905;
    void * I906;
    int (* I907)(void);
    int (* I908)(void);
    void * I909;
    void * I910;
    void * I911;
} txpInfoT;
typedef struct fsimInfoT {
    U  I912;
    U  I913;
    U  * I914;
    U  * I915;
    UP  * I916;
    UP  * I917;
    U  * I918;
    U  * I919;
    U  * I920;
} fsimInfoT;
typedef struct fgpInfoT {
    U  I921;
    U  I922;
    U  * I923;
    U  * I924;
    char * I925;
} fgpInfoT;
typedef struct simProfInfoT {
    U  I926;
    U  I927;
    U  I928;
    U  * I929;
    U  * I930;
    U  * I931;
    U  * I932;
} simProfInfoT;
typedef struct hybridSimInfoT {
    U  I933;
    U  I626;
    U  I934;
    U  I935;
    U  I936;
    void * I937;
    U  * I938;
    struct hybridSimReferrerData * I939;
    struct hybridSimReferrerData * I941;
} hybridSimInfoT;
typedef struct classInfoT {
    void * I942;
    void * I943;
    void * I944;
    U  I945;
    U  I946;
    U  I947;
    U  I948;
    UP  I949;
    UP  I950;
    void * I951;
} classInfoT;
struct qird {
    US  I58;
    US  I59;
    U  I60;
    U  I61;
    char * I62;
    char * I63;
    U  * I64;
    char * I65;
    char * I66;
    U  I67;
    U  I68;
    struct vcd_rt * I69;
    U  I71;
    struct _vcdOffset_rt * I72;
    U  I74;
    U  I75;
    ETYPE  * I76;
    U  * I77;
    classInfoT  * I78;
    int I79;
    U  I80;
    U  * I81;
    U  * I82;
    UP  I83;
    UP  * I84;
    BitFlags  I85;
    U  I86;
    U  I87;
    U  I88;
    U  I89;
    U  * I90;
    U  I91;
    U  I92;
    U  * I93;
    U  I94;
    U  I95;
    U  I96;
    U  I97;
    U  I98;
    U  I99;
    U  I100;
    U  I101;
    U  * I102;
    U  * I103;
    U  * I104;
    U  I105;
    U  I106;
    U  * I107;
    U  I108;
    U  I109;
    U  I110;
    U  I111;
    U  * I112;
    U  I113;
    U  * I114;
    U  I115;
    U  I116;
    U  I117;
    U  I118;
    U  I119;
    U  I120;
    U  * I121;
    char * I122;
    U  I123;
    U  I124;
    U  I125;
    U  I126;
    U  * I127;
    U  I128;
    U  I129;
    U  I130;
    U  I131;
    UP  * I132;
    U  I133;
    U  I134;
    U  I135;
    U  I136;
    U  I137;
    U  I138;
    U  * I139;
    U  I140;
    U  I141;
    U  * I142;
    U  * I143;
    U  * I144;
    U  * I145;
    U  * I146;
    U  I147;
    U  I148;
    struct taskInfo * I149;
    U  I151;
    U  I152;
    U  I153;
    U  I154;
    int * I155;
    U  * I156;
    UP  * I157;
    U  * I158;
    U  I159;
    U  I160;
    int * I161;
    U  I162;
    U  I163;
    U  I164;
    U  I165;
    U  I166;
    U  I167;
    struct qrefer * I168;
    U  * I170;
    unsigned * I171;
    void * I172;
    U  I173;
    struct classStaticReferData * I174;
    U  I176;
    U  * I177;
    U  I178;
    U  * I179;
    U  I180;
    struct wakeupInfoStruct * I181;
    U  I183;
    U  I184;
    U  I185;
    U  * I186;
    U  I187;
    U  * I188;
    U  * I189;
    U  I190;
    U  I191;
    U  I192;
    U  I193;
    U  * I194;
    U  I195;
    U  I196;
    U  * I197;
    U  I198;
    U  I199;
    U  * I200;
    U  * I201;
    U  * I202;
    U  I203;
    U  I204;
    U  I205;
    U  I206;
    U  I207;
    U  I208;
    struct qdefrefee * I209;
    struct qrefee * I211;
    U  * I213;
    U  * I214;
    int (* I215)(void);
    char * I216;
    U  I217;
    U  I218;
    void * I219;
    void * I220;
    NumLibs_t  I221;
    char * I222;
    U  * I223;
    U  I224;
    U  I225;
    U  I226;
    U  I227;
    U  I228;
    U  * I229;
    U  * I230;
    int I231;
    struct clock_load * I232;
    int I247;
    struct clock_data * I248;
    int I264;
    struct clock_hiconn * I265;
    U  I269;
    U  I270;
    U  I271;
    U  I272;
    U  * I273;
    U  I274;
    U  I275;
    U  * I276;
    U  I277;
    void * I278;
    U  I279;
    U  I280;
    UP  * I281;
    void * I282;
    U  I283;
    UP  * I284;
    U  * I285;
    int (* I286)(void);
    U  * I287;
    UP  * I288;
    U  * I289;
    U  I290 :1;
    U  I291 :31;
    U  I292;
    U  I293;
    UP  * I294;
    U  * I295;
    U  I296 :1;
    U  I297 :1;
    U  I298 :1;
    U  I299 :1;
    U  I300 :28;
    U  I301;
    U  I302;
    U  I303;
    U  I304 :31;
    U  I305 :1;
    UP  * I306;
    UP  * I307;
    fsimInfoT  * I308;
    nlpInfoT  * I309;
    U  I310;
    U  I311;
    UP  * I312;
    UP  * I313;
    UP  * I314;
    UP  * I315;
    struct daidirInfo * I316;
    struct vcs_tftable * I318;
    U  I320;
    UP  * I321;
    UP  * I322;
    U  I323;
    U  I324;
    U  I325;
    UP  * I326;
    U  * I327;
    UP  * I328;
    UP  * I329;
    struct qird_hil_data * I330;
    U  I332;
    U  * I333;
    UP  (* I334)(void);
    UP  (* I335)(void);
    UP  (* I336)(void);
    UP  (* I337)(void);
    UP  (* I338)(void);
    int * I339;
    int (* I340)(void);
    char * I341;
    UP  * I342;
    UP  * I343;
    UP  (* I344)(void);
    int (* I345)(void);
    int * I346;
    int (* I347)(void);
    int (* I348)(void);
    int * I349;
    char * I350;
    U  * I351;
    U  * I352;
    U  * I353;
    U  * I354;
    void * I355;
    int (* I356)(void);
    U  I357;
    UP  * I358;
    UP  * I359;
    U  I360;
    void * I361;
    U  I362;
    U  I363;
    U  I364;
    U  I365;
    U  I366;
    U  I367;
    char * I368;
    UP  * I369;
    U  * I370;
    UP  * I371;
    U  * I372;
    U  * I373;
    U  I374 :15;
    U  I375 :14;
    U  I376 :1;
    U  I377 :1;
    U  I378 :1;
    U  I379 :3;
    U  I380 :1;
    U  I381 :1;
    U  I382 :17;
    U  I383 :3;
    U  I384 :5;
    U  I385 :1;
    U  I386 :1;
    U  I387;
    qird_dbg_flags_t  I388;
    struct scope * I389;
    U  I391;
    U  I392;
    U  I393;
    U  * I394;
    U  * I395;
    U  * I396;
    U  I397;
    U  I398;
    U  I399;
    U  I400;
    struct pcbt * I401;
    UP  * I410;
    U  I411;
    U  I412;
    U  I413;
    U  I414;
    void * I415;
    void * I416;
    void * I417;
    int I418;
    U  * I419;
    U  I420;
    U  I421;
    UP  * I422;
    U  I423;
    U  I424;
    U  I425;
    U  I426;
    U  I427;
    void * I428;
    UP  * I429;
    U  I430;
    U  I431;
    void * I432;
    U  I433;
    txpInfoT  * I434;
    U  I435;
    U  I436;
    U  I437;
    U  I438;
    U  I439;
    U  I440;
    char * I441;
    U  I442;
    U  * I443;
    U  I444;
    U  * I445;
    U  I446;
    U  I447;
    U  I448;
    U  I449;
    U  I450;
    U  I451;
    U  * I452;
    U  I453;
    U  I454;
    U  * I455;
    U  I456;
    U  I457;
    U  I458;
    U  * I459;
    char * I460;
    U  I461;
    U  I462;
    U  I463;
    simProfInfoT  * I464;
    U  I465;
    U  I466;
    UP  * I467;
    U  I468;
    U  I469;
    U  I470;
    struct cosim_info * I471;
    U  I473;
    U  * I474;
    hybridSimInfoT  * I475;
    U  I476;
    U  * I477;
    U  I478;
    U  I479;
    U  * I480;
    U  I481;
    U  * I482;
    U  I483;
    U  * I484;
    U  I485;
    U  I486;
    U  * I487;
    U  I488;
    U  * I489;
    U  I490;
    U  I491;
    U  * I492;
    struct mhdl_outInfo * I493;
    UP  * I495;
    U  I496;
    UP  * I497;
    U  I498;
    void * I499;
    U  * I500;
    void * I501;
    char * I502;
    U  I503;
    U  * I504;
    char * I505;
    U  I506;
    struct regInitInfo * I507;
    UP  * I509;
    U  * I510;
    char * I511;
    U  I512;
    U  I513;
    U  I514;
    U  I515;
    U  I516;
    U  I517;
    U  I518;
    U  I519;
    UP  * I520;
    U  I521;
    U  I522;
    U  I523;
    UP  * I524;
    U  I525;
    UP  * I526;
    U  I527;
    UP  * I528;
    U  I529;
    U  I530;
    U  I531;
    U  * I532;
    U  I533;
    U  I534;
    U  I535;
    U  * I536;
    U  * I537;
    UP  * I538;
    UP  * I539;
    void * I540;
    UP  I541;
    void * I542;
    void * I543;
    void * I544;
    void * I545;
    void * I546;
    UP  I547;
    U  * I548;
    U  * I549;
    void * I550;
    U  I551 :1;
    U  I552 :31;
    U  I553;
    U  I554;
    U  I555;
    int I556;
    U  I557 :1;
    U  I558 :1;
    U  I559 :1;
    U  I560 :1;
    U  I561 :28;
    void * I562;
    void * I563;
    void * I564;
    void * I565;
    void * I566;
    void * I567;
    void * I568;
    UP  * I569;
    U  * I570;
    U  I571;
    char * I572;
    U  * I573;
    U  * I574;
    U  * I575;
    char * I576;
    int * I577;
    int * I578;
    UP  * I579;
    struct etype * I580;
    U  I581;
    U  I582;
    U  * I583;
    struct etype * I584;
    U  I585;
    U  I586;
    U  I587;
    U  * I588;
    void * I589;
    U  I590;
    U  I591;
    void * I592;
    fgpInfoT  * I593;
    U  I594;
    struct covreg_rt * I595;
    U  I597;
    U  I598;
    U  * I599;
    U  * I600;
    U  I601;
    U  I602;
};
typedef struct pcbt {
    U  * I403;
    UP  I78;
    U  I404;
    U  I405;
    U  I406;
    U  I407;
    U  I408;
    U  I409;
} PCBT;
typedef struct {
    int * I952;
    int * I953;
    int I954;
    union {
        long long enumDesc;
        long long classId;
    } I955;
} TypeData;
struct etype {
    U  I4 :8;
    U  I5;
    U  I6;
    U  I7 :1;
    U  I8 :1;
    U  I9 :1;
    U  I10 :1;
    U  I11 :1;
    U  I12 :1;
    U  I13 :1;
    U  I14 :1;
    U  I15 :1;
    U  I16 :4;
    U  I17 :1;
    U  I18 :1;
    U  I19 :1;
    U  I20 :1;
    U  I21 :1;
    U  I22 :1;
    U  I23 :1;
    U  I24 :1;
    U  I25 :2;
    U  I26 :1;
    U  I27 :2;
    U  I28 :1;
    U  I29 :1;
    U  I30 :1;
    U  I31 :1;
    U  I32 :1;
    U  I33 :1;
    TypeData  * I34;
    U  I35;
    U  I36;
    U  I37 :1;
    U  I38 :1;
    U  I39 :1;
    U  I40 :1;
    U  I41 :2;
    U  I42 :2;
    U  I43 :1;
    U  I44 :1;
    U  I45 :1;
    U  I46 :1;
    U  I47 :1;
    U  I48 :1;
    U  I49 :1;
    U  I50 :1;
    U  I51 :1;
    U  I52 :1;
    U  I53 :1;
    U  I54 :1;
    U  I55 :1;
    U  I56 :11;
};
struct iptmpl {
    QIRD  * I672;
    void * I673;
    void * I674;
    UP  I675;
    UP  I676;
    struct iptmpl * I677[2];
};
typedef unsigned long long FileOffset;
typedef struct _RmaMultiInputTable {
    U  I964 :1;
    U  I965 :1;
    U  I610 :2;
    U  I611 :4;
    U  I612 :5;
    U  I966 :1;
    U  I967 :1;
    U  I968 :1;
    U  I969 :1;
    U  I970 :1;
    U  I971 :1;
    U  I972;
    U  I973;
    U  I256;
    U  I974;
    U  I975 :1;
    U  I976 :31;
    union {
        U  utable;
        U  edgeInputNum;
    } I638;
    U  I977 :4;
    U  I978 :4;
    U  I979 :4;
    U  I980 :4;
    U  I981 :4;
    U  I982 :4;
    U  I983 :1;
    U  I984 :1;
    U  I985 :1;
    U  I986 :1;
    U  I987 :5;
    HsimExprChar  * I988;
    UB  * I989;
    UB  * I990;
    struct _RmaMultiInputTable * I963;
    struct _RmaMultiInputTable * I992;
} RmaMultiInputTable;
typedef struct _HsCgPeriod {
    U  I1044;
    U  I1045;
} HsCgPeriod;
typedef struct {
    U   I1046[2];
    U  I1047 :1;
    U  I1048 :1;
    U  I1049 :8;
    U  I1050 :8;
    U  I1051 :8;
    U  I1052 :4;
    U  I1053 :1;
    U  I1054 :1;
    unsigned long long I1055;
    unsigned long long I1056;
    unsigned long long I1057;
    unsigned long long I1058;
    unsigned long long I1045;
    U  I1044;
    U  I1059;
    U  I1060;
    U  I1061;
    U  I1062;
    U  I1063;
    HsCgPeriod  * I1064[10];
} HsimSignalMonitor;
typedef struct {
    InstNum  I1065;
    FlatNodeNum  I1066;
    U  I998;
    scalar  I1067;
    UB  I1068;
    UB  I1069;
    UB  I1070;
    UB  I1071;
    UB  I1072;
    UB  I1073;
    ULL  I1074;
    U  I1075;
    U  I1076;
    U  I1077;
    U  I1078;
    U  I1079;
    U  I1080;
    U  I1081;
    U  I1082;
    HsimSignalMonitor  * I1083;
    RP  I1084;
    RmaTimeStamp64  I649;
    U  I1085;
    RmaTimeStamp64  I1086;
    U  I1087;
    UB  I1088 :1;
    UB  I1089 :1;
    UB  I1090 :1;
    RP  I1091;
} HsimNodeRecord;
typedef struct {
    RP  I1099;
    RP  pcode;
} RmaIbfPcode;
typedef struct {
    RP  I1099;
    RP  I666;
} RmaIbfIp;
typedef struct {
    U  I760;
    InstNum32  I629;
} RmaIbfIpById;
typedef struct {
    U  I669;
    U  val;
} RmaDynamicEblklq;
typedef struct {
    U  I669;
    U  I670;
} RmaFgpDynamicEblklq;
typedef struct {
    U  val;
} RmaDynamicEblk;
typedef struct {
    U  I652 :28;
    U  I1100 :1;
    U  I1101 :1;
    U  I1102 :1;
    U  I1103 :1;
    U  I1104;
    RP  I1105;
    RP  I1106;
    U   I1107[1];
} RmaDbsedRtlLoads;
typedef struct {
    RP  I1108;
    RP  pfn;
    RP  pcode;
} RmaSeqPrimOutputEblkData;
typedef RP  RCICODE;
typedef struct {
    RmaEblk  I664;
} RmaEvTriggeredOrSyncLoadCg;
typedef struct {
    RO  I960;
    RP  pcode;
} SchedGateFanout;
typedef struct {
    RO  I960;
    RP  pcode;
    U   I1021[4];
} SchedSelectGateFanout;
typedef struct {
    RP  pcode;
    RmaEblklq  I664;
} SchedGateEblk;
typedef struct {
    RP  pcode;
    RmaEblklq  I664;
    UB  * I1109;
} SchedSelectGateEblk;
typedef struct {
    RmaEblk  I664;
    RP  I1110;
} RmaAnySchedSampleSCg;
typedef struct {
    RmaEblk  I664;
    RP  I1109;
    RP  I1110;
    vec32  I1111;
} RmaAnySchedVCg;
typedef struct {
    RmaEblk  I664;
    RP  I1109;
    RP  I1110;
    vec32   I722[1];
} RmaAnySchedWCg;
typedef struct {
    RmaEblk  I664;
    RP  I1109;
    RP  I1110;
    scalar   I1112[1];
} RmaAnySchedECg;
typedef struct {
    U  I1113;
    U  I652;
    U  I998;
    U  I1114;
    RmaIbfIp  * I1115;
    EBLK  I664;
    void * val;
} RmaThreadSchedCompiledLoads;
typedef struct {
    U  I652;
    U  I660;
    RmaThreadSchedCompiledLoads  * I1116;
} RmaSchedCompileLoadsCg;
typedef struct {
    RP  I1117;
} RmaRootCbkCg;
typedef struct {
    RP  I1118;
} RmaRootForceCbkCg;
typedef struct {
    RmaEblk  I664;
    RP  I1119;
} RmaForceCbkJmpCg;
typedef struct {
    U  I59;
    U  I660 :31;
    U  I1120 :1;
    vec32  I754;
    U  I1121;
    RP  I1122;
    RP  I1123;
} RmaForceSelectorV;
typedef struct {
    U  I59;
    RmaIbfPcode  I1130;
} RmaNetTypeDriverGate;
typedef struct {
    U  I59;
    U  I606;
    RmaIbfPcode   I1130[1];
} RmaNetTypeScatterGate;
typedef struct {
    U  I59;
    RmaIbfPcode  I1130;
} RmaNetTypeGatherGate;
typedef struct {
    RmaIbfPcode  I1131;
    U  I1132 :3;
    U  I1133 :1;
    U  I1134 :1;
    U  I973 :16;
} RmaNbaGateOfn;
typedef struct {
    U  I59;
    NBS  I1135;
    RmaIbfPcode  I1131;
} RmaNbaGate1;
typedef struct {
    RP  ptable;
    RP  pfn;
    RP  pcode;
} Rma1InputGateFaninCgS;
typedef struct RmaSeqPrimOutputS_ RmaSeqPrimOutputOnClkS;
struct RmaSeqPrimOutputS_ {
    RP  pfn;
    U  state;
    U  I1138;
    RP  I1139;
    scalar  val;
    U  I1140 :1;
    U  I1141 :1;
    U  I1142 :1;
    union {
        U  I645;
        U  I627;
    } I638;
    RP   I1143[1];
};
typedef struct {
    U  I59;
    U  iinput;
    UB  I1145;
    RP  I1146;
} RmaCondOptLoad;
typedef struct {
    U  I59;
    U  iinput;
    UB  I1145;
    RP  I1146;
} RmaMacroStateUpdate;
typedef struct {
    U  I59;
    U  state;
    U  I1147;
    UB  I1145;
    U  * I1148;
} RmaMacroState;
typedef struct {
    U  iinput;
    RP  I1149;
} RmaMultiInputLogicGateCg;
typedef struct {
    U  iinput;
    RP  ptable;
    RP  I1149;
} RmaSeqPrimEdgeInputCg;
typedef struct {
    RP  I1149;
} RmaSimonCellEdgeInputCg;
typedef struct {
    RmaEblk  I664;
    RP  pcode;
} RmaSched0GateCg;
typedef struct {
    RmaEblk  I664;
    RP  pcode;
    RP  pfn;
    scalar  I644;
    scalar  I1150;
} RmaUdpDeltaGateCg;
typedef struct {
    RmaEblk  I664;
    RP  pcode;
    RP  pfn;
    scalar  I1151;
} RmaSchedDeltaGateCg;
typedef struct {
    RP  pcode;
    RP  pfn;
    RmaDynamicEblk  I664;
    scalar  I1151;
    scalar  I1152;
    scalar  I1153;
    scalar  I561;
} RmaDynamicSchedDeltaGateCg;
typedef struct {
    UB  I1154;
    RP  I1155;
    RP  I1156;
} RmaPropNodeSeqLhsSCg;
typedef struct {
    RmaEblk  I664;
    RP  pcode;
    U  I998;
    U   I653[1];
} RmaBitEdgeEblk;
typedef struct {
    U  I59;
    U  I1157;
    RP  I753;
    RmaEblk  I664;
    RmaIbfPcode  I1131;
} RmaGateDelay;
typedef struct {
    U  I59;
    RP  I753;
    RmaEblk  I664;
    RmaIbfPcode  I1131;
} RmaGateBehavioralDelay;
typedef struct {
    U  I59;
    U  I1157;
    union {
        RP  I1419;
        RP  I1717;
        RP  I1734;
    } I727;
    RmaIbfPcode  I1131;
} RmaMPDelay;
typedef struct {
    U  I59;
    U  I1157;
    RmaPulse  I1158;
    RmaIbfPcode  I1131;
} RmaMPPulseHybridDelay;
typedef struct {
    U  I59;
    U  I1157;
    RmaIbfPcode  I1131;
    RmaMps  I1159;
} RmaMPHybridDelay;
typedef struct {
    U  I59;
    U  I1160;
    RmaIbfPcode  I1131;
    RmaEblk  I712;
} RmaMPHybridDelayPacked;
typedef struct {
    U  I59;
    U  I1157;
    RmaIbfPcode  I1131;
    RmaMpspNewCsdf  I1161;
} RmaMPPulseDelay;
typedef struct {
    U  I59;
    U  I1157;
    RmaMpsp  I1161;
    RmaIbfPcode  I1131;
} RmaMPPulseOptHybridDelay;
typedef struct _RmaBehavioralTransportDelay {
    U  I59;
    U  I1157;
    RP  I623;
    RmaTransEventHdr  I1004;
    RP  I750;
    RmaIbfPcode  I1131;
} RmaBehavioralTransportDelayS;
typedef struct {
    U  I59;
    U  I1157;
    RP  I623;
    RmaTransEventHdr  I1004;
    RP  I750;
    RmaIbfPcode  I1131;
} RmaNtcTransDelay;
typedef struct {
    U  I59;
    U  I1157;
    RP  I623;
    RmaEblk  I664;
    RmaIbfPcode  I1131;
} RmaNtcTransMpwOptDelay;
typedef struct {
    U  I59;
    U  I1157;
    RmaEblk  I664;
    RmaIbfPcode  I1131;
} RmaNtcTransZeroDelay;
typedef struct {
    U  I59;
    U  I1157;
    RP  I1162;
    RP  I1163;
    RmaTransEventHdr  I1004;
    RP  I750;
    RmaIbfPcode  I1131;
} RmaNtcTransDelayRF;
typedef struct {
    U  I59;
    U  I1157;
    RP  I1162;
    RP  I1163;
    RmaEblk  I664;
    RmaIbfPcode  I1131;
} RmaNtcTransMpwOptDelayRF;
typedef struct {
    U  I59;
    U  I1157;
    RP  I1164;
    RmaTransEventHdr  I1004;
    RP  I750;
    RmaIbfPcode  I1131;
} RmaICTransDelay;
typedef struct {
    U  I59;
    U  I1157;
    RP  I1164;
    RmaEblk  I664;
    RmaIbfPcode  I1131;
} RmaICTransMpwOptDelay;
typedef struct {
    U  I59;
    U  I1157;
    RmaEblk  I664;
    RmaIbfPcode  I1131;
} RmaICTransZeroDelay;
typedef struct {
    U  I59;
    U  I1157;
    RP  I753;
    RmaEblk  I664;
    RmaIbfPcode  I1131;
} RmaICSimpleDelay;
typedef struct {
    U  I59;
    U  I1157;
    union {
        RP  psimple;
        RP  I1717;
        RP  I1734;
    } I727;
    RmaIbfPcode  I1131;
} RmaICDelay;
typedef struct {
    U  I59;
    U  I1157;
    RP  I753;
    RmaEblk  I664;
    RmaIbfPcode  I1131;
} RmaPortDelay;
typedef struct {
    U  I59;
    U  I735;
} RmaDelays;
typedef struct {
    U  I973;
    RP  I1165;
} RmaRtlXEdgesLoad;
typedef struct {
    U  I59;
    RmaRtlXEdgesLoad   I1165[(5)];
    void * I1166;
} RmaRtlXEdgesHdr;
typedef struct {
    U  I59;
    US  I1167;
    US  I1168 :1;
    US  I987 :15;
    RP  I1169;
    RP  I1170;
    RP  I1171;
} RmaRtlEdgeBlockHdr;
typedef struct {
    RP  I1172;
    RP  I1173;
} RemoteDbsedLoad;
typedef struct {
    RmaEblk  I664;
    RP  I1174;
    RP  I1175;
    US  I1176;
    UB  I1177;
    UB  I1178 :2;
    UB  I1179 :2;
    UB  I1180 :1;
    UB  I987 :3;
    U  I626;
    RP  I1181;
    RP   I757[(5)];
    RP   I759[(5)];
    US  I1182;
    US  I1183;
    RP  I1184;
    RemoteDbsedLoad   I1185[1];
} RmaRtlEdgeBlock;
typedef struct TableAssign_ {
    struct TableAssign_ * I963;
    struct TableAssign_ * I744;
    U  I59;
    U  I1187 :1;
    U  I1188 :1;
    U  I1189 :2;
    U  I1190 :1;
    U  I645 :8;
    U  I1191 :1;
    U  I1192 :1;
    U  I1193 :1;
    U  I1194 :1;
    U  I1195 :1;
    U  I1196 :1;
    U  I1197 :1;
    U  I1198 :1;
    U  I1199 :1;
    U  I1200 :1;
    U  I987 :9;
    RP  ptable;
    RP  I1149;
} TableAssign;
typedef struct TableAssignLayoutOnClk_ {
    struct TableAssignLayoutOnClk_ * I963;
    struct TableAssignLayoutOnClk_ * I744;
    U  I59;
    U  I1187 :1;
    U  I1188 :1;
    U  I1189 :2;
    U  I1190 :1;
    U  I645 :8;
    U  I1191 :1;
    U  I1192 :1;
    U  I1193 :1;
    U  I1194 :1;
    U  I1195 :1;
    U  I1196 :1;
    U  I1197 :1;
    U  I1198 :1;
    U  I1199 :1;
    U  I1200 :1;
    U  I987 :9;
    RP  ptable;
    RmaSeqPrimOutputOnClkS  I1202;
    RmaEblk  I664;
} TableAssignLayoutOnClk;
typedef struct {
    U  state;
    U  I1203;
} RmaSeqPrimOutputOnClkOpt;
typedef struct TableAssignLayoutOnClkOpt_ {
    struct TableAssignLayoutOnClkOpt_ * I963;
    struct TableAssignLayoutOnClkOpt_ * I744;
    U  I1205;
    U  I1187 :1;
    U  I1188 :1;
    U  I1189 :2;
    U  I1190 :1;
    U  I645 :8;
    U  I1191 :1;
    U  I1192 :1;
    U  I1193 :1;
    U  I1194 :1;
    U  I1195 :1;
    U  I1196 :1;
    U  I1197 :1;
    U  I1198 :1;
    U  I1199 :1;
    U  I1200 :1;
    U  I987 :9;
    RmaSeqPrimOutputOnClkOpt  I1202;
    RmaSeqPrimOutputEblkData  I1206;
} TableAssignLayoutOnClkOpt;
typedef struct {
    U  I59;
    RP  I744;
    RP  I1207;
} RmaTableAssignList;
typedef struct {
    U  I59;
    RP  I744;
    RP  I1207;
    RP  I1208;
    RP  I1139;
    RP  I1209;
    UB  I1210;
    US  I645;
    UB  I1067;
    UB  I1211;
    UB  I1212;
    UB  I718;
    RP   I1213[0];
} RmaThreadTableAssignList;
typedef struct {
    RP  I1208;
    RP  I1139;
    RP  I1209;
    U  I1214 :1;
    U  I1215 :2;
    U  I1216 :1;
    US  I645;
    UB  I1067;
    UB  I1211;
    UB  I1212;
    UB  I718;
} RmaThreadTableHeader;
typedef struct {
    RP  I1172;
} RmaWakeupListCg;
typedef struct {
    RP  I1172;
} RmaWakeupArrayCg;
typedef struct {
    RP  I1172;
    RP  I1217;
} RmaPreCheckWakeupListCg;
typedef struct {
    RP  I1172;
    RP  I1217;
} RmaPreCheckWakeupArrayCg;
typedef struct {
    U  I1218;
    U  I645;
    RmaTimeStamp   I1219[1];
} RmaTsArray;
typedef struct {
    U  iinput;
    RP  I1220;
} RmaConditionsMdb;
typedef struct {
    RP  I1221;
    RP  I1222;
    U  I1223;
} RmaTcListHeader;
typedef struct {
    RP  I963;
    RP  I1224;
    RP  I1225;
    RP  I659;
    U  I1226;
    scalar  I973;
    scalar  I1227;
    US  I1228 :1;
    US  I1229 :1;
    US  I1230 :1;
    US  I1231 :1;
    US  I1232 :1;
    US  I1233 :1;
    US  I1234 :1;
    US  I1235 :5;
} RmaTcCoreSimple;
typedef struct {
    RP  I963;
    RP  I1224;
    RP  I1225;
    RP  I659;
    U  I1226;
    scalar  I973;
    scalar  I1227;
    US  I1228 :1;
    US  I1229 :1;
    US  I1230 :1;
    US  I1231 :1;
    US  I1232 :1;
    US  I1233 :1;
    US  I1234 :1;
    US  I1235 :5;
    RP  I1236;
} RmaTcCoreConditional;
typedef struct {
    RP  I963;
    RP  I1224;
    RP  I1225;
    RP  I659;
    U  I1226;
    scalar  I973;
    scalar  I1227;
    US  I1228 :1;
    US  I1229 :1;
    US  I1230 :1;
    US  I1231 :1;
    US  I1232 :1;
    US  I1233 :1;
    US  I1234 :1;
    US  I1235 :5;
    RP  I1236;
    RP  I1237;
} RmaTcCoreConditionalOpt;
typedef struct {
    RP  I963;
    RP  I1224;
    RP  I1225;
    RP  I659;
    U  I1226;
    scalar  I973;
    scalar  I1227;
    US  I1228 :1;
    US  I1229 :1;
    US  I1230 :1;
    US  I1231 :1;
    US  I1232 :1;
    US  I1233 :1;
    US  I1234 :1;
    US  I1235 :5;
    RP  I1237;
    RP  I1238;
    U  I1239;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtc;
typedef struct {
    RP  I1225;
    RP  I659;
    U  I1226;
    scalar  I973;
    scalar  I1227;
    US  I1228 :1;
    US  I1229 :1;
    US  I1230 :1;
    US  I1231 :1;
    US  I1232 :1;
    US  I1233 :1;
    US  I1234 :1;
    US  I1235 :5;
} RmaTcCoreSimpleNoList;
typedef struct {
    RP  I1225;
    RP  I659;
    U  I1226;
    scalar  I973;
    scalar  I1227;
    US  I1228 :1;
    US  I1229 :1;
    US  I1230 :1;
    US  I1231 :1;
    US  I1232 :1;
    US  I1233 :1;
    US  I1234 :1;
    US  I1235 :5;
    RP  I1236;
} RmaTcCoreConditionalNoList;
typedef struct {
    RP  I1225;
    RP  I659;
    U  I1226;
    scalar  I973;
    scalar  I1227;
    US  I1228 :1;
    US  I1229 :1;
    US  I1230 :1;
    US  I1231 :1;
    US  I1232 :1;
    US  I1233 :1;
    US  I1234 :1;
    US  I1235 :5;
    RP  I1236;
    RP  I1237;
} RmaTcCoreConditionalOptNoList;
typedef struct {
    RP  I1225;
    RP  I659;
    U  I1226;
    scalar  I973;
    scalar  I1227;
    US  I1228 :1;
    US  I1229 :1;
    US  I1230 :1;
    US  I1231 :1;
    US  I1232 :1;
    US  I1233 :1;
    US  I1234 :1;
    US  I1235 :5;
    RP  I1237;
    RP  I1238;
    U  I1239;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoList;
typedef struct {
    RP  I1225;
    RP  I659;
    U  I1226;
    scalar  I973;
    scalar  I1227;
    US  I1228 :1;
    US  I1229 :1;
    US  I1230 :1;
    US  I1231 :1;
    US  I1232 :1;
    US  I1233 :1;
    US  I1234 :1;
    US  I1235 :5;
    RP  I1237;
    RP  I1238;
    RP  I1143;
    U  I1239;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoListMdb;
typedef struct {
    RP  I1225;
    RP  I659;
    U  I1226;
    scalar  I973;
    scalar  I1227;
    US  I1228 :1;
    US  I1229 :1;
    US  I1230 :1;
    US  I1231 :1;
    US  I1232 :1;
    US  I1233 :1;
    US  I1234 :1;
    US  I1235 :5;
    RP  I1236;
    RP  I1143;
} RmaTcCoreConditionalNoListMdb;
typedef struct {
    RP  I1225;
    RP  I659;
    U  I1226;
    scalar  I973;
    scalar  I1227;
    US  I1228 :1;
    US  I1229 :1;
    US  I1230 :1;
    US  I1231 :1;
    US  I1232 :1;
    US  I1233 :1;
    US  I1234 :1;
    US  I1235 :5;
    U  I1241;
    RP  I1242;
    RP  I1243;
    RP  I1236;
    RP  I1244;
    RP  I1245;
    RmaTimeStamp  I1246;
} RmaTcCoreNochange;
typedef struct {
    RP  I1247;
    RP  I963;
} RmaTcCoreNochangeList;
typedef struct {
    RP  I1225;
    RP  I659;
    U  I1226;
    scalar  I973;
    scalar  I1227;
    US  I1228 :1;
    US  I1229 :1;
    US  I1230 :1;
    US  I1231 :1;
    US  I1232 :1;
    US  I1233 :1;
    US  I1234 :1;
    US  I1235 :5;
    RP  I1236;
    RmaEblk  I664;
    U  I1248;
} RmaTcCoreFullskew;
typedef struct {
    RP  I1249;
    RP  I963;
} RmaTcCoreFullskewList;
typedef struct {
    RP  I1220;
    RmaTimeStamp  I1250;
    scalar  I1251;
} RmaConditionalTSLoadNoList;
typedef struct {
    RP  I963;
    RP  I1220;
    RmaTimeStamp  I1250;
    scalar  I1251;
} RmaConditionalTSLoad;
typedef struct {
    RmaTimeStamp  I1250;
    scalar  I1251;
    US  I973;
    RP  I1237;
} RmaConditionalTSLoadOptNoList;
typedef struct {
    RP  I963;
    RmaTimeStamp  I1250;
    scalar  I1251;
    US  I973;
    RP  I1237;
} RmaConditionalTSLoadOpt;
typedef struct {
    RP  I1237;
    RP  I1252;
    U  I1239;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoList;
typedef struct {
    RP  I1143;
    RP  I1237;
    RP  I1252;
    U  I1239;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoListMdb;
typedef struct {
    RP  I963;
    RP  I1237;
    RP  I1252;
    U  I1239;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtc;
typedef struct {
    U  I1253;
    U  I1254;
    FlatNodeNum  I1098;
    U  I998;
    U  I1255;
    U  I1256;
    RmaIbfPcode  I1131;
    union {
        scalar  I1257;
        vec32  I1258;
        scalar  * I1259;
        vec32  * I1260;
    } val;
} RmaScanSwitchData;
typedef struct {
    U  I1253;
    U  I1254;
    U  I998;
    U  I1261;
    FlatNodeNum  I1098;
    RmaIbfPcode  I1131;
    union {
        scalar  I1257;
        vec32  I1258;
        scalar  * I1259;
        vec32  * I1260;
        double I1262;
        scalar  * I1263;
    } val;
} RmaRtvsGateData;
typedef struct {
    RP  I963;
    RP  I744;
    RP  I1264;
} RmaDoublyLinkedListElem;
typedef struct {
    RP  I1265;
    RP  I1266;
    U  I1267 :1;
    U  I1268 :1;
    U  I1269 :1;
    U  I1270 :4;
    U  I1271 :1;
    U  I1090 :1;
    U  I1272 :1;
    U  I1273;
} RmaSwitchGateInCbkListInfo;
typedef struct {
    union {
        RmaDoublyLinkedListElem  I1784;
        RmaSwitchGateInCbkListInfo  I2;
    } I638;
    RmaIbfPcode  I1131;
} RmaSwitchGate;
typedef struct RmaNonEdgeLoadData1_ {
    US  I1274;
    scalar  val;
    scalar  I1275 :1;
    scalar  I1276 :1;
    scalar  I1277 :3;
    scalar  I1278 :1;
    scalar  I1279 :1;
    scalar  I1280 :1;
    U  I1281;
    U  I1282;
    RP  I757;
    RP  I1283;
    RP  I1098;
    RP  I1284;
    RP  I1285;
} RmaNonEdgeLoadData1;
typedef struct RmaNonEdgeLoadHdr1_ {
    UB  I1275;
    UB  I1286;
    US  I1067;
    RmaNonEdgeLoadData1  * I1165;
    RmaNonEdgeLoadData1  * I744;
    RP  I1184;
    void * I1166;
} RmaNonEdgeLoadHdr1;
typedef struct RmaNonEdgeLoadHdrPrl1_ {
    U  I1287;
    RP  I659;
} RmaNonEdgeLoadHdrPrl1;
typedef struct RmaNonEdgeLoadArrayHdr1_ {
    UB  I1275 :1;
    UB  I1286 :1;
    UB  I1067;
    int I626;
    RmaNonEdgeLoadData1  * I630;
    U  * I1288;
    RP  I1184;
    void * I1166;
} RmaNonEdgeLoadArrayHdr1;
typedef struct RmaNonEdgeLoadDataArray1_ {
    U  I1289;
} RmaNonEdgeLoadDataArray1;
typedef struct RmaChildClockProp_ {
    RP  I757;
    RP  I1290;
    RP  I1098;
    RP  pcode;
    scalar  val;
} RmaChildClockProp;
typedef struct RmaChildClockPropList1_ {
    RmaChildClockProp  * I1165;
    RmaChildClockProp  * I744;
} RmaChildClockPropList1;
typedef struct {
    UB  I1291;
    UB  I1292 :1;
    UB  I1293 :1;
    UB  I1294 :1;
    UB  I1295 :1;
    UB  I987 :4;
    US  cedges;
    RP  I1296;
} RmaMasterXpropLoadHdr;
typedef struct {
    UB  I1291;
    UB  I1297;
    UB  I1298;
    UB  I1299 :1;
    UB  I1300 :1;
    UB  I987 :6;
    U  cedges;
} RmaXpropLoadHdr;
typedef struct {
    UB  I1297;
    UB  I1298;
    UB  I1301;
    UB  I1302;
    U  cedges :29;
    U  I1293 :1;
    U  I1303 :1;
    U  I1304 :1;
    U  I1305;
    U  I1306;
    RP  I1307;
    RP  I1308;
    RmaRtlEdgeBlockHdr  * I1309;
} RmaChildXpropLoadHdr;
struct clock_load {
    U  I234 :5;
    U  I235 :12;
    U  I236 :1;
    U  I237 :2;
    U  I238 :1;
    U  I239 :1;
    U  I240 :1;
    U  I241 :9;
    U  I242;
    U  I243;
    void (* pfn)(void * I245, char val);
};
typedef struct clock_data {
    U  I250 :1;
    U  I251 :1;
    U  I252 :1;
    U  I253 :1;
    U  I234 :5;
    U  I235 :12;
    U  I254 :6;
    U  I255 :1;
    U  I237 :2;
    U  I238 :1;
    U  I241 :1;
    U  I256;
    U  I257;
    U  I258;
    U  I242;
    U  I259;
    U  I260;
    U  I261;
    U  I262;
    U  I263;
} HdbsClockData;
struct clock_hiconn {
    U  I267;
    U  I268;
    U  I242;
    U  I237;
};
typedef union _RmaCbkMemOptUnion {
    RP  I1310;
    RP  I1311;
    RP  I1312;
} RmaCbkMemOptUnion;
typedef struct _RmaDaiOptCg {
    RmaCbkMemOptUnion  I1313;
} RmaDaiOptCg;
struct futq_slot2 {
    U  I704;
    U   I705[32];
};
struct futq_slot1 {
    U  I701;
    struct futq_slot2  I702[32];
};
struct futq_info {
    scalar  * I696;
    U  I697;
    U  I698;
    struct futq_slot1  I699[32];
};
struct futq {
    struct futq * I685;
    struct futq * I687;
    RmaEblk  * I688;
    RmaEblk  * I689;
    U  I669;
    U  I1;
    DEblkPoolT  * I690;
};
struct sched_table {
    struct futq * I691;
    struct futq I692;
    struct hash_bucket * I693;
    struct hash_bucket * I695;
};
struct dummyq_struct {
    clock_struct  I1314;
    EBLK  * I1315;
    EBLK  * I1316;
    EBLK  * I1317;
    struct futq * I1318;
    struct futq * I1319;
    struct futq * I1320;
    struct sched_table * I1321;
    struct futq_info * I1323;
    struct futq_info * I1325;
    U  I1326;
    U  I1327;
    U  I1328;
    U  I1329;
    U  I1330;
    U  I1331;
    U  I1332;
    struct millenium * I1333;
    EBLK  * I1335;
    EBLK  * I1336;
    EBLK  * I1337;
    EBLK  * I1338;
    EBLK  * I1339;
    EBLK  * I1340;
    EBLK  * I1341;
    EBLK  * I1342;
    EBLK  * I1343;
    EBLK  * I1344;
    EBLK  * I1345;
    EBLK  * I1346;
    EBLK  * I1347;
    EBLK  * I1348;
    EBLK  * I1349;
    EBLK  * I1350;
    EBLK  * I1351;
    MPS  * I1352;
    struct retain_t * I1353;
    EBLK  * I1354;
    EBLK  * I1355;
    EBLK  * I1356;
    EBLK  * I1357;
    EBLK  * I1358;
    EBLK  * I1359;
    EBLK  * I1360;
    EBLK  * I1361;
    EBLK  * I1362;
    EBLK  * I1363;
    EBLK  * I1364;
    EBLK  * I1365;
    EBLK  * I1366;
    EBLK  * I1367;
    EBLK  * I1368;
    EBLK  * I1369;
    EBLK  * I1370;
    EBLK  * I1371;
    EBLK  * I1372;
    EBLK  * I1373;
    EBLK  * I1374;
    EBLK  * I1375;
    EBLK  * I1376;
    EBLK  * I1377;
    EBLK  * I1378;
    EBLK  * I1379;
    EBLK  I1380;
    EBLK  * I1381;
    EBLK  * I1382;
    int I1383;
    struct vcs_globals_t * I1384;
    clock_struct  I1386;
    unsigned long long I1387;
    EBLK  * I1388;
    EBLK  * I1389;
    void * I1390;
    U  semilerOptQueuesFlag;
    U  I1392;
};
typedef void (* FP)(void *  , scalar   );
typedef void (* FP1)(void *  );
typedef void (* FPRAP)(void *  , vec32  *  , U   );
typedef U  (* FPU1)(void *  );
typedef void (* FPV)(void *  , UB  *  );
typedef void (* FPVU)(void *  , UB  *  , U   );
typedef void (* FPDP)(void *  , void *  , scalar   );
typedef void (* FPVDP)(void *  , void *  , void *  );
typedef void (* FPLSEL)(void *  , scalar   , U   );
typedef void (* FPLSELV)(void *  , vec32  *  , U   , U   );
typedef void (* FPFPV)(UB  *  , UB  *  , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPFA)(UB  *  , UB  *  , U   , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPRPV)(UB  *  , U   , U   , U   );
typedef void (* FPEVCDLSEL)(void *  , scalar   , U   , UB  *  );
typedef void (* FPEVCDLSELV)(void *  , vec32  *  , U   , U   , UB  *  );
typedef void (* FPNTYPE_L)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_H)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_LPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_HPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef struct _lqueue {
    int I1393;
    struct _lqueue * I715;
    EBLK  * I1395;
    EBLK  * I668;
    DEblkPoolT  * I690;
} Queue;
typedef struct {
    void * I1396;
    void * I1397;
    void * I1398[2];
    void * I1399;
} ClkLevel;
typedef struct {
    unsigned long long I1400;
    EBLK  I1303;
    U  I1401;
    U  I1402;
    union {
        void * pHeap;
        Queue  * pList;
    } I638;
    unsigned long long I1403;
    ClkLevel  I1404;
    Queue   I1405[1];
} Qhdr;
extern scalar  * pUpdateForDynVcd;
extern UB   Xvalchg[];
extern UB   X4val[];
extern UB   X3val[];
extern UB   X2val[];
extern UB   XcvtstrTR[];
extern UB   Xcvtstr[];
extern UB   Xbuf[];
extern UB   Xbitnot[];
extern UB   Xwor[];
extern UB   Xwand[];
extern U   Xbitnot4val[];
extern UB   globalTable1Input[];
extern __thread unsigned long long vcs_clocks;
extern __thread unsigned long long ref_vcs_clocks;
extern UB   Xunion[];
extern UB   vcsXunionCg[];
extern UB   vcsXworCg[];
extern UB   vcsXwandCg[];
extern U  fRTFrcRelCbk;
extern FP  txpFnPtr;
extern UP   bepatsFunctionArray[];
extern FP   rmaFunctionArray[];
extern UP   rmaFunctionRtlArray[];
extern UP   rmaFunctionHsRtlArray[];
extern FP   rmaFunctionLRArray[];
extern U  rmaFunctionCount;
extern U  rmaFunctionLRCount;
extern U  rmaFunctionLRDummyCount;
extern UP  rmaFunctionDummyEndPtr;
extern FP   rmaFunctionFanoutArray[];
extern __thread UB  dummyScalar;
extern __thread UB  fScalarIsForced;
extern __thread UB  fScalarIsReleased;
extern __thread UB  fScalarIsDeposited;
extern U  fNotimingchecks;
extern U  fFsdbDumpOn;
extern RP  * iparr;
extern FP1  * rmaPostAnySchedFnPtr;
extern FP1  * rmaPostAnySchedFnSamplePtr;
extern FP1  * rmaPostAnySchedVFnPtr;
extern FP1  * rmaPostAnySchedWFnPtr;
extern FP1  * rmaPostAnySchedEFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusNonCongruentFnPtr;
extern FP1  * rmaPostSchedUpdateEvTrigFnPtr;
extern FP1  * rmaSched0UpdateEvTrigFnPtr;
extern FP1  * rmaPostSchedRecoveryResetDbsFnPtr;
extern U  fGblDataOrTime0Prop;
extern UB   rmaEdgeStatusValArr[];
extern UB   rmaposEdgeStatusArray[];
extern UB   rmanegEdgeStatusArray[];
extern FP1  * propForceCbkSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedNativeVcCgFnPtr;
extern U  VCS_NCBK_Enabled;
extern UB  * ptableGbl;
extern U  * vcs_ptableOffsetsGbl;
extern UB  * expandedClkValues;
extern __thread Qhdr  * lvlQueue;
extern __thread unsigned threadIndex;
extern __thread unsigned fBufferingEvent;
extern int cPeblkThreads;
extern US   xedges[];
extern U  mhdl_delta_count;
extern U  ignoreSchedForScanOpt;
extern U  fignoreSchedForDeadComboCloud;
extern int fZeroUser;
extern U  fEveBusPullVal;
extern U  fEveBusPullFlag;
extern U  fFutEventPRL;
extern U  fParallelEBLK;
extern __thread UB  fNettypeIsForced;
extern __thread UB  fNettypeIsReleased;
extern EBLK  * peblkFutQ1Head;
extern EBLK  * peblkFutQ1Tail;
extern US  * edgeActionT;
extern unsigned long long * derivedClk;
extern U  fHashTableSize;
extern U  fSkipStrChangeOnDelay;
extern U  fHsimRuntimeSdfOpt;
extern U  fSkipMpTsUpdateOnStr;
extern scalar   edgeChangeLookUp[4][4];
extern U  fDoingTime0Prop;
extern U  fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U  fLoopReportRT;
extern U  rmaProfEvtProp;
extern U  semilerOptQueuesFlag;
extern int semilerOpt;


extern void *mempcpy(void* s1, void* s2, unsigned n);
extern RP* getDynamicVcdLocation(U patIdx, RP* pupdate);
extern UB* rmaEvalDelays(UB* pcode, scalar val, scalar *preVal, U isPortOrICDelayEvalSkipReqd);
extern UB* rmaEvalDelaysV(UB* pcode, vec32* pval);
extern void rmaPopTransEvent(UB* pcode);
extern void rmaSetupFuncArray(UP* ra, U c, U w);
extern void rmaSetupRTLoopReportPtrs(UP* funcs, UP* rtlFuncs, U cnt, U cntDummy, UP end);
extern void SinitHsimPats(void);
extern void VVrpDaicb(void* ip, U nIndex);
extern int SDaicb(void *ip, U nIndex);
extern void SDaicbForHsimNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimNoFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimWithFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimNoFlagDynElabFrcRel(U* mem, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimNoFlagFrcRel(void* pDaiCb, unsigned char reason, int msb, int lsb, int ndx);
extern void hsimDispatchCbkMemOptForVcd(RP p, U val);
extern void* hsimGetCbkMemOptCallback(RP p);
extern void hsimDispatchCbkMemOptNoDynElabS(RP* p, U val, U isStrength);
extern void hsimDispatchDACbkMemOptNoDynElabS(RP* p, U val, UB* da_byte, U isStrength);
extern U slaveTogglesThisTime;
extern void* hsimGetCbkPtrNoDynElab(RP p);
extern void hsimDispatchCbkMemOptDynElabS(U** pvcdarr, U** pcbkarr, U val, U isScalForced, U isScalReleased, U isStrength);
extern void hsimDispatchCbkMemOptNoDynElabVector(RP* /*RmaDaiOptCg* */p, void* pval, U /*RmaValueType*/ vt, U cbits);
extern void copyAndPropRootCbkCgS(RmaRootCbkCg* pRootCbk, scalar val);
extern void copyAndPropRootCbkCgV(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgW(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgE(RmaRootCbkCg* rootCbk, scalar* pval);
extern void Wsvvar_callback_non_dynamic1(RP* ptr, int);
extern void rmaExecEvSyncList(RP plist);
extern void Wsvvar_callback_virt_intf(RP* ptr);
extern void Wsvvar_callback_hsim_var(RP* ptr);
extern void checkAndConvertVec32To2State(vec32* value, vec32* svalue, U cbits, U* pforcedBits);
extern unsigned int fGblDataOrTime0Prop;
extern void SchedSemiLerMP1(UB* pmps, U partId);
extern void SchedSemiLerMPO(UB* pmpso, U partId);
extern void rmaDummyPropagate(void);
extern RP rmaTestCg(RP pcode, U vt, UB* value);
extern void hsUpdateModpathTimeStamp(UB* pmps);
extern void doMpd32One(UB* pmps);
extern void doMpdCommon(MPS* pmps);
extern TimeStamp GET_DIFF_DELAY_FUNC(TimeStamp ts);
extern void SchedSemiLerMP(UB* ppulse, U partId);
extern EBLK *peblkFutQ1Head;
extern EBLK *peblkFutQ1Tail;
extern void scheduleuna(UB *e, U t);
extern void scheduleuna_mp(EBLK *e, unsigned t);
extern void schedule(UB *e, U t);
extern void sched_hsopt(struct dummyq_struct * pQ, EBLK *e, U t);
extern void sched_millenium(struct dummyq_struct * pQ, void *e, U thigh, U t);
extern void schedule_1(EBLK *e);
extern void sched0(UB *e);
extern void sched0lq(EBLK *e);
extern void sched0lqnc(EBLK *e);
extern void sched0una(UB *e);
extern void sched0una_th(struct dummyq_struct *pq, UB *e);
extern void hsopt_sched0u_th(struct dummyq_struct *pq, UB *e);
extern void scheduleuna_mp_th(struct dummyq_struct *pq, EBLK *e, unsigned t);
extern void schedal(UB *e);
extern void sched0_th(struct dummyq_struct * pQ, EBLK *e);
extern void sched0u(UB *e);
extern void sched0u_th(struct dummyq_struct *pq, UB *e);
extern void sched0_hsim_front_th(struct dummyq_struct * pQ, UB *e);
extern void sched0_hsim_frontlq_th(struct dummyq_struct * pQ, UB *e);
extern void sched0lq_th(struct dummyq_struct * pQ, UB *e);
extern void schedal_th(struct dummyq_struct * pQ, UB *e);
extern void scheduleuna_th(struct dummyq_struct * pQ, void *e, U t);
extern void sched64cuna_th(struct dummyq_struct * pQ, void *e, U h, U l);
extern void schedule_th(struct dummyq_struct * pQ, UB *e, U t);
extern void schedule_1_th(struct dummyq_struct * pQ, EBLK *peblk);
extern void SetupLER_th(struct dummyq_struct * pQ, EBLK *e);
extern void FsdbReportClkGlitch(UB*,U);
extern void AddToClkGLitchArray(EBLK*);
extern void SchedSemiLer_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXP_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXPFreeVar_th(struct dummyq_struct * pQ, EBLK *e);
extern U getVcdFlags(UB *ip);
extern void VVrpNonEventNonRegdScalarForHsimOpt(void* ip, U nIndex);
extern void VVrpNonEventNonRegdScalarForHsimOpt2(void* ip, U nIndex);
extern void SchedSemiLerTBReactiveRegion(struct eblk* peblk);
extern void SchedSemiLerTBReactiveRegion_th(struct eblk* peblk, U partId);
extern void SchedSemiLerTr(UB* peblk, U partId);
extern void SchedSemiLerNBA(UB* peblk, U partId);
extern void NBA_Semiler(void *ip, void *pNBS);
extern void sched0sd_hsim(UB* peblk);
extern void vcs_sched0sd_hsim_udpclk(UB* peblk);
extern void vcs_sched0sd_hsim_udpclkopt(UB* peblk);
extern void sched0sd_hsim_PRL(UB* peblk);
extern void sched0lq_parallel_clk(EBLK* peblk);
extern void sched0lq_de(U* pe, void* ip, void* prout);
extern void sched0lq_hsopt_nonfgp_de(U* pe, void* ip, void* prout);
extern void sched0lq_hsopt_parallel_de(U* pe, void* ip, void* prout);
extern void sched0_de_inl(void* ip, void* prout);
extern void rmaPostDynamicSchedDeltaGate(UB* pcode);
extern U    isRtlClockScheduled(EBLK* peblk);
extern void doFgpRaceCheck(UB* pcode, UB* p, U flag);
extern void doSanityLvlCheck();
extern void sched0lq_parallel_ova(EBLK* peblk);
extern void sched0lq_parallel_ova_precheck(EBLK* peblk);
extern void rmaDlpEvalSeqPrim(UB* peblk, UB val, UB preval);
extern void appendNtcEvent(UB* phdr, scalar s, U schedDelta);
extern void appendTransEventS(RmaTransEventHdr* phdr, scalar s, U schedDelta);
extern void schedRetainHsim(MPS* pMPS, scalar sv, scalar pv);
extern void updateRetainHsim(MPS* pMPS,scalar sv, scalar pv);
extern void hsimCountXEdges(void* record,  scalar s);
extern void hsimRegisterEdge(void* sm,  scalar s);
extern EBLK* pvcsGetLastEventEblk(U thid);
extern void insertTransEventIC(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, int re, UB* predd, U fpdd);
extern void insertNtcEventRF(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, U* delays);
extern U doTimingViolation(RmaTimeStamp ts,RP* pdata, U fskew, U limit, U floaded, U fcondopt, RmaTimeStamp tsNochange);
extern void sched_gate_hsim(EBLK* peblk, unsigned t, RP* offset, U gd_info, U encodeInPcode, void* propValue);
extern int getCurSchedRegion();
extern FP getRoutPtr(RP, U);
extern U rmaChangeCheckAndUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern void rmaUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaChangeCheckAndUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaLhsPartSelUpdateE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaUpdateWithForceSelectorE(scalar* pvalDst, scalar* pvalSrc, U cbits, U* pforceSelector);
extern void rmaUpdateWFromE(vec32* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaLhsPartSelWFromE(vec32* pvalDst, scalar* pvalSrc, U index,U width);
extern U rmaChangeCheckAndUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void *VCSCalloc(size_t size, size_t count);
extern void *VCSMalloc(size_t size);
extern void VCSFree(void *ptr);
extern U rmaLhsPartSelWithChangeCheckW(vec32* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern U rmaLhsPartSelWithChangeCheckEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelUpdateW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void rmaEvalWunionW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWorW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWandW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalUnionE(scalar* dst, scalar* src, U cbits, U count, RP ptable);
typedef U RmaCgFunctionType;
extern RmaIbfPcode* rmaEvalPartSelectsW(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsWLe32(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsWToE(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsEToE(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsEToW(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern U rmaEvalBitPosEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U VcsForceVecVCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U/*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecVCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecWCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecWCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecECg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecACg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecCg(UB* pcode, UB* pvDst, U ibeginDst, U width, U /*RmaValueType*/ type,U fisRoot, UB* prhsDst, U frhs, U* pforcedbits);
extern U VcsDriveBitsAndDoChangeCheckV(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckW(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckE(scalar* pvSel, scalar* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern void cgvecDebug_Eblk(UB* pcode);
extern U rmaCmpW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void copyVec32ArrMask(vec32* pv1, vec32* pv2, U len, U* mask);
extern void* memcpy(void*, const void*, size_t);
extern int memcmp(const void*, const void*, size_t);
extern void propagateScanOptPathVal(EBLK *peblk);
extern UB* rmaProcessRtvsSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitchesV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanoptDump(UB* pcode, scalar val);
extern UB* rmaProcessScanoptDumpV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanChainOptSeqPrims(UB* pcode, scalar val);
extern void schedResetRecoveryDbs(U cedges, EBLK* peblkFirst);
extern UB* rmaEvalUnaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVOneFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVLargeFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalAndOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpV(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpV(UB* pcode, vec32* value);
extern UB* rmaEvalTernaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalTernaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalBinaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpS(UB* pcode, scalar val);
extern scalar rmaGetScalarFromWCg(vec32* pval, U index);
extern void rmaSetScalarInWCg(vec32* pval, U index, scalar s);
extern void rmaSetWInW(vec32* dst, vec32* src, U index, U indexSrc, U width);
extern void setHsimFunc(void* ip, U offset);
extern void vcs_updateHsimFunc(void* ip, U offset);
extern void unsetHsimFunc(void* ip);
extern U fProfEvtProp;
extern UB* getEvcdStatusByFlagsE(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsV(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsW(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsS(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table);
extern UB* getSingleDrvEvcdStatusS(UB value, U fTBDriver);
extern UB* getSingleDrvEvcdStatusE(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusV(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusW(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getEvcdStatusByDrvEvcdStatus(UB* pdrvevcdStatus, U cdrivers, UB* table, U cbits);
extern void evcdCallback(UP pcode, U cbits);
extern UB* getSavedEvcdStatus(void);
extern void saveEvcdStatus(UB*);
extern void mhdlMarkExport(void*, U);
extern void levelInsertQueue(int);
extern void levelInsertQueueGL(int);
extern void VcsRciRtl(RP pcode);
extern void VcsRciSCompiledLoad(scalar* pcode, scalar ibnVal);
extern U fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U fLoopReportRT;
extern void rtSched0LoopDectDumpProcess(void* e, void* rtn, void* PQ);
extern void pushHsimRtnCtxt(void* pcode);
extern void popHsimRtnCtxt();
extern EBLK* loopReportInlinedSched0Wrapper(EBLK *peblk);
extern void loopReportSched0Wrapper(EBLK *peblk, unsigned int sfType, unsigned int fTH, struct dummyq_struct* pq);
extern void loopReportSchedSemiLerWrapper(EBLK *peblk, int sfType);
extern void CallGraphPushNodeAndAddToGraph(UP flatNode, UP instNum, U dummy);
extern void CallGraphPopNode(void);
extern RP elabGetIpTpl(U in);
extern U rmaEvalBitBothEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQXW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval01EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval0XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval10EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval1XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX1EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX0EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitPosEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitBothEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern void rmaScheduleNbaGate(RP pcode, scalar val);
extern void rmaEvalRtlEdgeLoads(RmaRtlEdgeBlockHdr *phdr, US clkEdge, scalar clkVal, scalar prevClkVal, scalar val4,   scalar prevval4, scalar master4val);
extern void rmaEvaluateDynamicGateLoadsCg(RP p, scalar s);
extern void rmaEvaluateFusedWithDynamicGateLoadsCg(RP p, scalar s);
extern void rmaScheduleGatedClockEdgeLoadNew(UB* p, US* ea, U flags, UB* plist, UB* pprevlist, scalar v, scalar pv);
extern void rmaScheduleGatedClockEdgeLoad(UB* p, US* ea, U flags, UB* plist, UB* pprevlist, scalar v);
extern void vcsCheckIfClkValValid(U val, U index);
extern void rmaRemoveNonEdgeLoads(UB* pcode);
extern void rmaRecordEvents(HsimNodeRecord *pnr);
extern void handlePCBs(UB* p, U i);
extern void markMasterClkOvaLists(U fdbs, RP p);
extern void rmaChildClockPropAfterWrite(UB* p);
extern void rmaSchedChildClockPropAfterWrite(UB* p, UB* pmasterList, UB val);
extern void rmaChangeListForMovedGates(UB clkVal, UB f10Edge, UB* subMasterVal, UB* plist, RP* p, U count);
extern void rmaEvalSeqPrimLoadsByteArray(UB* pcode, UB val, UB prevval4);
extern void rmaEvalSeqPrimLoadsByteArrayX(UB* pcode, UB val, UB prevval4);
extern void vcsRmaEvalSeqPrimLoadsByteArraySCT(UB* pcode, UB val, UB prevval4, U c);
extern void rmaEvalSimonCellLoadsByteArray(UB* pcode, UB val, UB prevval4);
extern void vcsAbortForBadEBlk(void);
extern scalar edgeChangeLookUp[4][4];
extern void Wsvvar_sched_virt_intf_eval(RP* ptr, char val);
extern void vcs_hwcosim_drive_dut_scalar(U id, char val);
extern void vcs_hwcosim_drive_dut_vector_4state(U id, vec32* val);
extern U vcs_rmaGetClkValForSeqUdpLayoutOnClkOpt(UB* poutput);
extern U Fsim_handle_wreal_faults(void);
extern U rmaIsS2State(scalar s);
extern U rmaIsV2State(vec32* pval, U cbits);
extern U rmaIsW2State(vec32* pval, U cbits);
extern U rmaIsE2State(scalar* pval, U cbits);
extern void rmaUpdateRecordFor2State(HsimNodeRecord* record, U f2state);
typedef void (*FuncPtr)();
static inline U asm_bsf (U in)
{
#if defined(linux)
    U out;
#if !defined(__aarch64__)
    asm ("movl %1, %%eax; bsf %%eax, %%eax; movl %%eax, %0;"
        :"=r"(out)
        :"r"(in)
        :"%eax"
        );
#else
    out = ffs(in) - 1;
#endif
    return out;
#else
    return 0;
#endif
}


#ifdef __cplusplus
extern "C" {
#endif
void  rmaPropagate0_p_simv_daidir (UB  * pcode, scalar  val);
void  rmaPropagate0_simv_daidir (UB  * pcode, scalar  val);
void  rmaPropagate0_f_simv_daidir (UB  * pcode, scalar  val, U  I615, scalar  * I1433, U  did);
void  rmaPropagate0_r_simv_daidir (UB  * pcode);
void  rmaPropagate0_wn_simv_daidir (UB  * pcode, scalar  val);
void  rmaPropagate1_p_simv_daidir (UB  * pcode, scalar  val);
void  rmaPropagate1_simv_daidir (UB  * pcode, scalar  val);
void  rmaPropagate1_f_simv_daidir (UB  * pcode, scalar  val, U  I615, scalar  * I1433, U  did);
void  rmaPropagate1_r_simv_daidir (UB  * pcode);
void  rmaPropagate1_wn_simv_daidir (UB  * pcode, scalar  val);
void  schedNewEvent (struct dummyq_struct * I1418, EBLK  * I1413, U  I623);
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
  }
#endif
#endif /*__DO_RMAHDR_*/

